_75c‍.x([["Game",()=>Game]]);/*
Add your code for Game here
 */
       class Game {
    constructor(n) {
        this.n = n;
        this.score = 0;
        this.won = false;
        this.over = false;
        this.board = [];
        this.setupNewGame();
    }

    setupNewGame() {
        this.board = new Array(this.n*this.n);
        for (let index = 0; index < this.board.length; index++) {
            this.board[index] = 0;
        }
        var init1 = Math.floor(Math.random() * this.board.length);
        var init2 = Math.floor(Math.random() * this.board.length);
        while(init1 == init2) {
            var init2 = Math.floor(Math.random() * this.board.length);
        }
        this.board[init1] = this.newTile();
        this.board[init2] = this.newTile();
    }

    loadGame(gameState) {
        this.n = Math.sqrt(gameState.board.length);
        this.score = gameState.score;
        this.won = gameState.won;
        this.over = gameState.over;
        this.board = gameState.board;
    }

    moveIterator(iterator) {
        if(iterator = this.n) {
            for (let index = 0; index < this.board.length; index++) {
                try {
                    if(this.board[index - iterator] == 0) {
                        this.board[index - iterator] = this.board[index];
                        this.board[index] = 0;
                    }
                } catch (err) {

                }
            }
        }
    }

    moveUp() {
        for (let index = 0; index < this.board.length; index++) {
            if(this.board[index] == 0) {
                try {
                    if(this.board[index + this.n] != 0 && this.board[index + this.n] != undefined) {
                        this.board[index] = this.board[index + this.n];
                        this.board[index + this.n] = 0;
                    }
                } catch (error) {
                    
                }
            }   
        }
    }

    move(direction) {
        var iterator = 0;
        if (direction.localeCompare("up") == 0) {
            this.moveUp();
        }
        else if (direction.localeCompare("down") == 0) {
            iterator = -this.n;
        }
        else if (direction.localeCompare("left") == 0) {
            iterator = -1;
        } else {
            iterator = 1;
        }
        if(iterator != 0) {
            this.moveIterator(iterator);
        }
    }

    toString() {
        for (let index = 0; index < this.board.length; index++) {
            if(index % this.n) {
                print('<br />');
            }
            print("[" + this.board[index] + "] ");
        }
    }

    onMove(callback) {}

    onWin(callback) {}

    onLose(callback) {}

    getGameState() {
        var gameState = {};
        gameState.board = this.board;
        gameState.score = this.score;
        gameState.won = this.won;
        gameState.over = this.over;
        return gameState;
    }

    isUnavailable() {
        for (let index = 0; this.board < array.length; index++) {
            if(this.board[index] == 0) {
                return true;
            }
        }
        return false;
    }

    findAvailableTile() {
        if(this.isUnavailable) {
            var init1 = Math.floor(Math.random() * this.board.length);
            if (array[init1] == 0) {
                array[init1] = this.newTile();
            } else {
                this.findAvailableTile();
            }
        }
    }

    newTile() {
        var random = Math.random();
        if(random <= 0.9) {
            return 2;
        }
        return 4;
    }
}